AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a dynamodb table and insert item into it (Just for testing purpose)

Resources:
  TestDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "test-dynamodb"
      AttributeDefinitions:
        - AttributeName: "itemid"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "itemid"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  InsertItems:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "InsertDynamoDBItems"
      Runtime: "python3.8"
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          
          def lambda_handler(event, context):
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('test-dynamodb')
              
              items = [
                  {"itemid": 0, "itemname": "Hit"},
                  {"itemid": 1, "itemname": "Hitarthi"}
              ]
              
              for item in items:
                  table.put_item(Item=item)
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Items inserted successfully!')
              }

  InvokeLambda:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt InsertItems.Arn

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "DynamoDBAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                Resource: !GetAtt TestDynamoDBTable.Arn
