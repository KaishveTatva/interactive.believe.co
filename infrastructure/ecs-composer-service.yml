AWSTemplateFormatVersion: 2010-09-09
Description: To create ECS Service.

Parameters:
  ResourcePrefix:
    Description: Resource prefix that will be used for all resource names 
    Type: String
  EnvironmentName:
    Description: An environment name that will be used for resource names
    Type: String
  ContainerName: 
    Type: String
  ECRRepoName:
    Type: String
  Region:
    Type: String 
    Default: 'us-east-1'
  ClusterName:
    Description: Cluster Name
    Type: String
  ALBSecurityGroupId:
    Description: ALB Security Group Id
    Type: String

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family : !Sub ${ResourcePrefix}-${EnvironmentName}-${ContainerName}-task-defination
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepoName}:latest
          Essential: 'true'
          PortMappings:
            - ContainerPort: '8000'
              HostPort: '8000'
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ['', ['/ecs/', !Ref AWS::StackName]]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: true
      NetworkMode: awsvpc
      Memory: 4GB
      Cpu: 1vCPU
      ExecutionRoleArn: !Sub '{{resolve:ssm:/${ResourcePrefix}/${EnvironmentName}/${ClusterName}/ExecutionRole/ARN}}'
      TaskRoleArn: !Sub '{{resolve:ssm:/${ResourcePrefix}/${EnvironmentName}/TaskRole/ARN}}'

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ResourcePrefix}-${EnvironmentName}-${ContainerName}-sg
      GroupDescription: Security Group for ECS Service
      VpcId: !Sub '{{resolve:ssm:/${ResourcePrefix}/${EnvironmentName}/vpc-id}}'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: '0.0.0.0/0'
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref ALBSecurityGroupId        
      SecurityGroupEgress:
        - IpProtocol: "-1"
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ResourcePrefix}-${EnvironmentName}-${ContainerName}-sg

  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Sub ${ResourcePrefix}-${EnvironmentName}-${ContainerName}-service
      Cluster: !Sub '{{resolve:ssm:/${ResourcePrefix}/${EnvironmentName}/${ClusterName}/name}}'
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: 
            - !Ref ECSSecurityGroup
          Subnets:
            - !Sub '{{resolve:ssm:/${ResourcePrefix}/${EnvironmentName}/ECSTasks/a}}'
            - !Sub '{{resolve:ssm:/${ResourcePrefix}/${EnvironmentName}/ECSTasks/b}}'
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - TargetGroupArn: !Sub '{{resolve:ssm:/${ResourcePrefix}/${EnvironmentName}-tg/arn}}'
          ContainerName: !Ref ContainerName
          ContainerPort: '8000'

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: !Sub ${ResourcePrefix}-${EnvironmentName}-${ContainerName}-autoscaling-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                Resource: '*'
  
  AddSGOutboundToALB:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: add outbound to ALB's SG
      DestinationSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId
      FromPort: 0
      GroupId: !Ref ALBSecurityGroupId
      IpProtocol: "-1"
      ToPort: 65535

Outputs:
  ComposerSecurityGroupId:
    Description: "The ID of the Ecs Composer SG"
    Value: !GetAtt ECSSecurityGroup.GroupId